# Greatly inspired by this:
# https://stackoverflow.com/a/30142139
#
# Straightforward Makefile that builds everything into the BUILD_DIR, and
# recompiles only what is needed.

# Configurables
CC := clang
# Disable unused parameter warning since not everything is implemented yet
CFLAGS := -O3 -std=gnu11 -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function
BIN := gym
BUILD_DIR := build

# For release and debug flags inserted by ./run.sh
CFLAGS += $(USER_FLAGS)

# Submodule dependencies
INCLUDES := -I./ -D_REENTRANT -Ideps/sdl2/install/include/SDL2
LIBS := -lm -Ldeps/sdl2/install/lib -lSDL2

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SRC := main.c ../megado/ym2612.c ../megado/psg.c
# Put all objects into the build dir, preserving the SRC hierarchy
OBJ := $(SRC:%.c=$(BUILD_DIR)/%.o)
# The .d files are generated by CC, used to rebuild objs whenever any dependency
# changes
DEP := $(OBJ:%.o=%.d)

# Default target: the main binary
$(BUILD_DIR)/$(BIN): $(OBJ)
# Create build directories on the way
	@mkdir -p $(@D)
	$(CC) $^ $(CFLAGS) $(LIBS) -o $@

# Include .d files built by the next rule
-include $(DEP)

$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(@D)
# -MMD generates the .d dependencies on the go
	$(CC) $< $(CFLAGS) $(INCLUDES) -MMD -c -o $@

.PHONY: clean
clean:
	-rm --force $(BUILD_DIR)/$(BIN) $(OBJ) $(DEP)
