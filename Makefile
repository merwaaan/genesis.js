# Greatly inspired by this:
# https://stackoverflow.com/a/30142139
#
# Straightforward Makefile that builds everything into the BUILD_DIR, and
# recompiles only what is needed.

# Configurables
CC := clang
# Disable unused parameter warning since not everything is implemented yet
CFLAGS := -std=c11 -Wall -Wextra -Wno-unused-parameter -Wno-unused-variable
BIN := megado-bin
BUILD_DIR := build

# For release and debug flags inserted by ./run.sh
CFLAGS += $(USER_FLAGS)

# Folders containing C files to compile
MODULES := megado megado/m68k test

# Submodule dependencies
INCLUDES := -I./ -Ideps/cimgui/ -Ideps/glfw/include\
						-Ideps/glew/include -Ideps/json-c/include/json-c
GLFW_DEPS := -lrt -lm -ldl -lXrandr -lXinerama -lXxf86vm -lXext -lXcursor \
             -lXrender -lXfixes -lX11 -lpthread -lxcb -lXau -lXdmcp -lstdc++
LIBS := deps/glew/build/lib/libGLEW.a -lGL -lGLU \
        deps/glfw/build/src/libglfw3.a $(GLFW_DEPS) \
			  deps/cimgui/cimgui/cimgui.a -lstdc++ \
        deps/json-c/lib/libjson-c.a

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# There can be only one main, and that is test/main.c
SRC := $(filter-out megado/m68k/main.c,$(foreach sdir,$(MODULES),$(wildcard $(sdir)/*.c)))
# Put all objects into the build dir, preserving the SRC hierarchy
OBJ := $(SRC:%.c=$(BUILD_DIR)/%.o)
# The .d files are generated by CC, used to rebuild objs whenever any dependency
# changes
DEP := $(OBJ:%.o=%.d)

# Default target: the main binary
$(BUILD_DIR)/$(BIN): $(OBJ)
# Create build directories on the way
	@mkdir -p $(@D)
	$(CC) $^ $(CFLAGS) $(LIBS) -o $@

# Include .d files built by the next rule
-include $(DEP)

$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(@D)
# -MMD generates the .d dependencies on the go
	$(CC) $< $(CFLAGS) $(INCLUDES) -MMD -c -o $@

.PHONY: clean
clean:
	-rm --force $(BUILD_DIR)/$(BIN) $(OBJ) $(DEP)
